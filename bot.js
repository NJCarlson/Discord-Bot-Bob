//#region Discord JS
const Discord = require('discord.js');
const fetch = require('node-fetch');
const querystring = require('querystring');

const client = new Discord.Client();
const prefix = '!';
const trim = (str, max) => ((str.length > max) ? `${str.slice(0, max - 3)}...` : str);
const openweatherkey = '6c06e49a121cab65326278fe2388227f';

let Ainsults = ['Titty', 'Ass', 'Nut', 'Jizz', 'Pop-Tart', 'Corona Virus', 'Fart Box', 'Ball', 'Testicle', 'Cunt', 'Smegma', 'Fart', 'Booger', 'Fecal', 'STD', 'Donkey Anus', 'Fat', 'Nipple', 'Disease'];  //noun
let Binsults = ['Licking', 'Fucking', 'Fingering', 'Sniffing', 'Tasting', 'Busting', 'Surfing', 'Plague-ridden', 'Grinding', 'Squeezing', 'Shrivelling', 'Breathing', 'Spooning', 'Mouthed', 'Hugging', 'Stabbing', 'Assed', 'Gobbling', 'scruffy-looking', 'Snorting']; // ing or ed
let Cinsults = ['Waffle Stomper', 'Fucker', 'Tickler', 'Butt-Muncher', 'Ass Monkey', 'cum gutter', 'Blaster', 'Hobgoblin', 'Furry', 'Coward', 'Scum bag', 'Skeezer', 'Nerf-Herder', 'Crab-infested Cooch', 'Lint Licker', 'Pirate', 'Rat', 'Snitch', 'Troglodyte', 'Dweeb', 'Peasant', 'Bumpkin', 'Weasel', 'Tickle-Monster', 'Know-It-All', 'Whore', 'Slime Ball', 'Creeper', 'Douche Bag']

function WeatherReport() {

}

function insult() {


	A = Ainsults[Math.floor(Math.random() * Ainsults.length)];
	B = Binsults[Math.floor(Math.random() * Binsults.length)];
	C = Cinsults[Math.floor(Math.random() * Cinsults.length)];

	return A + ' ' + B + ' ' + C;

}

client.login('Njg3MTIwMDU0MTg5MjkzNTkx.Xm2wJw.Tr7tEuk_6V6feNwWDTEOYfVJIJ0');

client.once('ready', () => {
	console.log('Ready!');
});

client.on('message', async message => {

	if (message.author.bot) {
		// console.log('ignoring bot message');
		return;
	}

	if (!message.content.startsWith(prefix)) {
		// console.log('ignoring non command');
		return;
	}

	const args = message.content.slice(prefix.length).split(/ +/);
	const command = args.shift().toLowerCase();


	try {
		switch (command) {
			case 'help':
				{
					help =
						`!help - list of commands.
			!ping  - Returns "Pong" message to verify BobBot is listening. 
			!cat - BobBot finds you a picture of a cat from https://aws.random.cat/meow
			!urban [Search term] - Returns a definition from Urban Dictionary.
			!insult - Returns a unique insult generated by BobBot's proprietary Insult Engine. 
			!weather [Search Location] - Experimental, returns weather from openweathermap api.
			!spam [message] - BobBot sends the message 5 times, can only send the !insult message, requires permission.
			`;
					message.channel.send(help);
				}
				break;
			case 'ping':
				{
					message.channel.send('Pong!');
				}
				break;
			case 'cat':
				{
					const { file } = await fetch('https://aws.random.cat/meow').then(response => response.json());
					message.channel.send(file);
				}
				break;
			case 'urban':
				{
					if (!args.length) {
						return message.channel.send('You need to supply a search term!');
					}

					const query = querystring.stringify({ term: args.join(' ') });

					const { list } = await fetch(`https://api.urbandictionary.com/v0/define?${query}`).then(response => response.json());

					if (!list.length) {
						return message.channel.send(`No results found for **${args.join(' ')}**.`);
					}

					const [answer] = list;
					const embed = new Discord.MessageEmbed()
						.setColor('#EFFF00')
						.setTitle(answer.word)
						.setURL(answer.permalink)
						.addField('Definition', trim(answer.definition, 1024))
						.addField('Example', trim(answer.example, 1024))
						.addField('Rating', `${answer.thumbs_up} thumbs up. ${answer.thumbs_down} thumbs down.`);

					message.channel.send(embed);
				}
				break;
			case 'insult':
				{
					insultee = args.join(" ");

					strinsult = insult();

					if (test) {
						console.log('test true');
					}

					if (!args.length) {
						return message.channel.send(strinsult);
					}
					else if (insultee.includes('and')) {
						return message.channel.send(insultee + ' are ' + strinsult + 's');
					}
					else {
						return message.channel.send(insultee + ' is a ' + strinsult);
					}

				}
				break;
			case 'weather':
				{
					if (!args.length) {
						return message.channel.send('Where? Try !weather [CITY NAME]');
					}

					search = args.join(" ");
					url = 'https://api.openweathermap.org/data/2.5/weather?q=' + search + '&appid=' + openweatherkey;

					var Report;

					// await fetch(url).then(response =>response.json()).then()
					//  ' Weather in ' + search + '\n'  +	
					// 'Description : ' + obj.weather[0].main + '\n' +
					// 'Temp : ' + obj.main.temp + 'Kelvin' + '\n' +
					// 'Feels Like : ' +  obj.main.feels_like + 'Kelvin';

					// const [data] = obj;
					// const [weather] = data.weather;
					// const embed = new Discord.MessageEmbed()
					// 	.setColor('#EFFF00')
					// 	.setTitle('Weather in ' + search + 'from Open Weather Map')
					// 	.setURL('https://api.openweathermap.org')
					// 	.addField('Weather', trim(weather.description, 1024))
					// 	.addField('Temp', trim(main.temp + ' Kelvin', 1024))
					// 	.addField('Feels like', trim(main.feels_like + ' Kelvin', 1024))

					message.channel.send(Report);

				}
				break;
			case 'spam':
				{
					//lock spam commands to bot channel
					mchannel = null;
					try {

						mchannel = message.guild.channels.cache.find(channel => channel.name === 'bot-commands')

						if (mchannel === undefined) {
							console.log('channel undefined, Defaulting to channel request was made in...');
							mchannel = message.channel;
						}
					}
					catch(error){
						console.log('Caught Error, '+ error + ' Defaulting to channel request was made in...');
						mchannel = message.channel;
					}

					spamMessage = args.join(" ");

					//Authorized = (message.member.roles.cache.some(r => r.name === "The Bob") || message.member.roles.cache.some(r => r.name === 'Bob-Ombs') || message.member.displayName === "Smilingbob72");
					Authorized = true;
					if (Authorized) {
						test = true;
						for (let index = 0; index < 5; index++) {
							var sent = mchannel.send(spamMessage);
						}
					}
					else {
						message.channel.send('You are not authorized to use this command.');
					}
					return;

				}
			case 'spaminsult':
				{

					insultee = args.join(" ");

					//lock spam commands to bot channel
					mchannel = null;
					try {
						mchannel = message.guild.channels.cache.find(channel => channel.name === 'bot-commands')

						if (mchannel === undefined) {
							console.log('channel undefined, Defaulting to channel request was made in...');
							mchannel = message.channel;
						}

					}
					catch(error){
						console.log('Caught Error, '+ error + ' Defaulting to channel request was made in...');
						mchannel = message.channel;
					}

					//Authorized = (message.member.roles.cache.some(r => r.name === "The Bob") || message.member.roles.cache.some(r => r.name === 'Bob-Ombs') || message.member.displayName === "Smilingbob72");
					Authorized = true;
					if (Authorized) {

						for (let index = 0; index < 5; index++) {
							strinsult = insult();

							if (!args.length) {
								mchannel.send(strinsult);
							}
							else if (insultee.includes('and')) {
								mchannel.send(insultee + ' are ' + strinsult + 's');
							}
							else {
								mchannel.send(insultee + ' is a ' + strinsult);
							}

						}
					}
					else {
						message.channel.send('You are not authorized to use this command.');
					}

				}
				break;
			default:
				{
					return message.channel.send("Invalid command! For a list of valid commands try !help ");
				}
				break;

		}

	} catch (error) {
		message.channel.send('BobBot has encountered an error : ' + error);
	}

});



